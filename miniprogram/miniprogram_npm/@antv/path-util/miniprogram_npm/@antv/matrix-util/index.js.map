{"version":3,"sources":["index.js","ext.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ext = exports.vec3 = exports.vec2 = exports.mat3 = void 0;\nvar gl_matrix_1 = require(\"gl-matrix\");\nObject.defineProperty(exports, \"mat3\", { enumerable: true, get: function () { return gl_matrix_1.mat3; } });\nObject.defineProperty(exports, \"vec2\", { enumerable: true, get: function () { return gl_matrix_1.vec2; } });\nObject.defineProperty(exports, \"vec3\", { enumerable: true, get: function () { return gl_matrix_1.vec3; } });\nvar ext = require(\"./ext\");\nexports.ext = ext;\n//# sourceMappingURL=index.js.map","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.vertical = exports.angleTo = exports.direction = exports.transform = exports.leftScale = exports.leftRotate = exports.leftTranslate = void 0;\n/**\n * @description 扩展方法，提供 gl-matrix 为提供的方法\n * */\nvar gl_matrix_1 = require(\"gl-matrix\");\nfunction leftTranslate(out, a, v) {\n    var transMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    gl_matrix_1.mat3.fromTranslation(transMat, v);\n    return gl_matrix_1.mat3.multiply(out, transMat, a);\n}\nexports.leftTranslate = leftTranslate;\nfunction leftRotate(out, a, rad) {\n    var rotateMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    gl_matrix_1.mat3.fromRotation(rotateMat, rad);\n    return gl_matrix_1.mat3.multiply(out, rotateMat, a);\n}\nexports.leftRotate = leftRotate;\nfunction leftScale(out, a, v) {\n    var scaleMat = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    gl_matrix_1.mat3.fromScaling(scaleMat, v);\n    return gl_matrix_1.mat3.multiply(out, scaleMat, a);\n}\nexports.leftScale = leftScale;\nfunction leftMultiply(out, a, a1) {\n    return gl_matrix_1.mat3.multiply(out, a1, a);\n}\n/**\n * 根据 actions 来做 transform\n * @param m\n * @param actions\n */\nfunction transform(m, actions) {\n    var matrix = m ? [].concat(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    for (var i = 0, len = actions.length; i < len; i++) {\n        var action = actions[i];\n        switch (action[0]) {\n            case 't':\n                leftTranslate(matrix, matrix, [action[1], action[2]]);\n                break;\n            case 's':\n                leftScale(matrix, matrix, [action[1], action[2]]);\n                break;\n            case 'r':\n                leftRotate(matrix, matrix, action[1]);\n                break;\n            case 'm':\n                leftMultiply(matrix, matrix, action[1]);\n                break;\n            default:\n                break;\n        }\n    }\n    return matrix;\n}\nexports.transform = transform;\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nfunction direction(v1, v2) {\n    return v1[0] * v2[1] - v2[0] * v1[1];\n}\nexports.direction = direction;\n/**\n * 二维向量 v1 到 v2 的夹角\n * @param v1\n * @param v2\n * @param direct\n */\nfunction angleTo(v1, v2, direct) {\n    var ang = gl_matrix_1.vec2.angle(v1, v2);\n    var angleLargeThanPI = direction(v1, v2) >= 0;\n    if (direct) {\n        if (angleLargeThanPI) {\n            return Math.PI * 2 - ang;\n        }\n        return ang;\n    }\n    if (angleLargeThanPI) {\n        return ang;\n    }\n    return Math.PI * 2 - ang;\n}\nexports.angleTo = angleTo;\n/**\n * 计算二维向量的垂直向量\n * @param out\n * @param v\n * @param flag\n */\nfunction vertical(out, v, flag) {\n    if (flag) {\n        out[0] = v[1];\n        out[1] = -1 * v[0];\n    }\n    else {\n        out[0] = -1 * v[1];\n        out[1] = v[0];\n    }\n    return out;\n}\nexports.vertical = vertical;\n//# sourceMappingURL=ext.js.map"]}