{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar WILDCARD = '*';\r\n/* event-emitter */\r\nvar EventEmitter = /** @class */ (function () {\r\n    function EventEmitter() {\r\n        this._events = {};\r\n    }\r\n    /**\r\n     * 监听一个事件\r\n     * @param evt\r\n     * @param callback\r\n     * @param once\r\n     */\r\n    EventEmitter.prototype.on = function (evt, callback, once) {\r\n        if (!this._events[evt]) {\r\n            this._events[evt] = [];\r\n        }\r\n        this._events[evt].push({\r\n            callback: callback,\r\n            once: !!once,\r\n        });\r\n        return this;\r\n    };\r\n    /**\r\n     * 监听一个事件一次\r\n     * @param evt\r\n     * @param callback\r\n     */\r\n    EventEmitter.prototype.once = function (evt, callback) {\r\n        return this.on(evt, callback, true);\r\n    };\r\n    /**\r\n     * 触发一个事件\r\n     * @param evt\r\n     * @param args\r\n     */\r\n    EventEmitter.prototype.emit = function (evt) {\r\n        var _this = this;\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        var events = this._events[evt] || [];\r\n        var wildcardEvents = this._events[WILDCARD] || [];\r\n        // 实际的处理 emit 方法\r\n        var doEmit = function (es) {\r\n            var length = es.length;\r\n            for (var i = 0; i < length; i++) {\r\n                if (!es[i]) {\r\n                    continue;\r\n                }\r\n                var _a = es[i], callback = _a.callback, once = _a.once;\r\n                if (once) {\r\n                    es.splice(i, 1);\r\n                    if (es.length === 0) {\r\n                        delete _this._events[evt];\r\n                    }\r\n                    length--;\r\n                    i--;\r\n                }\r\n                callback.apply(_this, args);\r\n            }\r\n        };\r\n        doEmit(events);\r\n        doEmit(wildcardEvents);\r\n    };\r\n    /**\r\n     * 取消监听一个事件，或者一个channel\r\n     * @param evt\r\n     * @param callback\r\n     */\r\n    EventEmitter.prototype.off = function (evt, callback) {\r\n        if (!evt) {\r\n            // evt 为空全部清除\r\n            this._events = {};\r\n        }\r\n        else {\r\n            if (!callback) {\r\n                // evt 存在，callback 为空，清除事件所有方法\r\n                delete this._events[evt];\r\n            }\r\n            else {\r\n                // evt 存在，callback 存在，清除匹配的\r\n                var events = this._events[evt] || [];\r\n                var length_1 = events.length;\r\n                for (var i = 0; i < length_1; i++) {\r\n                    if (events[i].callback === callback) {\r\n                        events.splice(i, 1);\r\n                        length_1--;\r\n                        i--;\r\n                    }\r\n                }\r\n                if (events.length === 0) {\r\n                    delete this._events[evt];\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /* 当前所有的事件 */\r\n    EventEmitter.prototype.getEvents = function () {\r\n        return this._events;\r\n    };\r\n    return EventEmitter;\r\n}());\r\nexports.default = EventEmitter;\r\n//# sourceMappingURL=index.js.map"]}