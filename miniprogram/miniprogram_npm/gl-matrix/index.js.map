{"version":3,"sources":["index.js","common.js","mat2.js","mat2d.js","mat3.js","mat4.js","quat.js","vec3.js","vec4.js","quat2.js","vec2.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA,ACHA;AHUA,ADGA,AENA,ACHA,ACHA;AHUA,ADGA,AENA,ACHA,ACHA;AHUA,ADGA,AENA,ACHA,ACHA,ACHA;AJaA,ADGA,AENA,ACHA,ACHA,ACHA;AJaA,ADGA,AENA,ACHA,ACHA,ACHA;AJaA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA;ALgBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA;ALgBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA;ALgBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA;ANmBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA;ANmBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA;ANmBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,ACHA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,AFMA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,AFMA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,AFMA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ADGA,AENA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;APsBA,ACHA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ANmBA,ACHA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;ALgBA,ACHA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,ACHA,AHSA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaA,ACHA,ACHA,AGTA,AFMA,ACHA;AJaaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJafile":"index.js","sourcesContent":["\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.vec4 = exports.vec3 = exports.vec2 = exports.quat2 = exports.quat = exports.mat4 = exports.mat3 = exports.mat2d = exports.mat2 = exports.glMatrix = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nexports.glMatrix = glMatrix;\r\n\r\nvar mat2 = _interopRequireWildcard(require(\"./mat2.js\"));\r\n\r\nexports.mat2 = mat2;\r\n\r\nvar mat2d = _interopRequireWildcard(require(\"./mat2d.js\"));\r\n\r\nexports.mat2d = mat2d;\r\n\r\nvar mat3 = _interopRequireWildcard(require(\"./mat3.js\"));\r\n\r\nexports.mat3 = mat3;\r\n\r\nvar mat4 = _interopRequireWildcard(require(\"./mat4.js\"));\r\n\r\nexports.mat4 = mat4;\r\n\r\nvar quat = _interopRequireWildcard(require(\"./quat.js\"));\r\n\r\nexports.quat = quat;\r\n\r\nvar quat2 = _interopRequireWildcard(require(\"./quat2.js\"));\r\n\r\nexports.quat2 = quat2;\r\n\r\nvar vec2 = _interopRequireWildcard(require(\"./vec2.js\"));\r\n\r\nexports.vec2 = vec2;\r\n\r\nvar vec3 = _interopRequireWildcard(require(\"./vec3.js\"));\r\n\r\nexports.vec3 = vec3;\r\n\r\nvar vec4 = _interopRequireWildcard(require(\"./vec4.js\"));\r\n\r\nexports.vec4 = vec4;\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }","\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.setMatrixArrayType = setMatrixArrayType;\r\nexports.toRadian = toRadian;\r\nexports.equals = equals;\r\nexports.RANDOM = exports.ARRAY_TYPE = exports.EPSILON = void 0;\r\n\r\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n// Configuration Constants\r\nvar EPSILON = 0.000001;\r\nexports.EPSILON = EPSILON;\r\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexports.ARRAY_TYPE = ARRAY_TYPE;\r\nvar RANDOM = Math.random;\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\r\n\r\nexports.RANDOM = RANDOM;\r\n\r\nfunction setMatrixArrayType(type) {\r\n  exports.ARRAY_TYPE = ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\n\r\nfunction toRadian(a) {\r\n  return a * degree;\r\n}\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\n\r\nif (!Math.hypot) Math.hypot = function () {\r\n  var y = 0,\r\n      i = arguments.length;\r\n\r\n  while (i--) {\r\n    y += arguments[i] * arguments[i];\r\n  }\r\n\r\n  return Math.sqrt(y);\r\n};","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.copy = copy;\r\nexports.identity = identity;\r\nexports.fromValues = fromValues;\r\nexports.set = set;\r\nexports.transpose = transpose;\r\nexports.invert = invert;\r\nexports.adjoint = adjoint;\r\nexports.determinant = determinant;\r\nexports.multiply = multiply;\r\nexports.rotate = rotate;\r\nexports.scale = scale;\r\nexports.fromRotation = fromRotation;\r\nexports.fromScaling = fromScaling;\r\nexports.str = str;\r\nexports.frob = frob;\r\nexports.LDU = LDU;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.multiplyScalar = multiplyScalar;\r\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\r\nexports.sub = exports.mul = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\n\r\n\r\nfunction fromValues(m00, m01, m10, m11) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3]; // Calculate the determinant\r\n\r\n  var det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\n\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\n\r\n\r\nfunction scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction fromRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\n\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3]);\r\n}\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\r\n\r\n\r\nfunction LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\n\r\n\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\n\r\n\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar sub = subtract;\r\nexports.sub = sub;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.copy = copy;\r\nexports.identity = identity;\r\nexports.fromValues = fromValues;\r\nexports.set = set;\r\nexports.invert = invert;\r\nexports.determinant = determinant;\r\nexports.multiply = multiply;\r\nexports.rotate = rotate;\r\nexports.scale = scale;\r\nexports.translate = translate;\r\nexports.fromRotation = fromRotation;\r\nexports.fromScaling = fromScaling;\r\nexports.fromTranslation = fromTranslation;\r\nexports.str = str;\r\nexports.frob = frob;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.multiplyScalar = multiplyScalar;\r\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.sub = exports.mul = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\n\r\n\r\nfunction fromValues(a, b, c, d, tx, ty) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction invert(out, a) {\r\n  var aa = a[0],\r\n      ab = a[1],\r\n      ac = a[2],\r\n      ad = a[3];\r\n  var atx = a[4],\r\n      aty = a[5];\r\n  var det = aa * ad - ab * ac;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\n\r\nfunction determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\n\r\n\r\nfunction scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\n\r\n\r\nfunction translate(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\n\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\r\n}\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\n\r\n\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\r\n}\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\n\r\n\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar sub = subtract;\r\nexports.sub = sub;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.fromMat4 = fromMat4;\r\nexports.clone = clone;\r\nexports.copy = copy;\r\nexports.fromValues = fromValues;\r\nexports.set = set;\r\nexports.identity = identity;\r\nexports.transpose = transpose;\r\nexports.invert = invert;\r\nexports.adjoint = adjoint;\r\nexports.determinant = determinant;\r\nexports.multiply = multiply;\r\nexports.translate = translate;\r\nexports.rotate = rotate;\r\nexports.scale = scale;\r\nexports.fromTranslation = fromTranslation;\r\nexports.fromRotation = fromRotation;\r\nexports.fromScaling = fromScaling;\r\nexports.fromMat2d = fromMat2d;\r\nexports.fromQuat = fromQuat;\r\nexports.normalFromMat4 = normalFromMat4;\r\nexports.projection = projection;\r\nexports.str = str;\r\nexports.frob = frob;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.multiplyScalar = multiplyScalar;\r\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.sub = exports.mul = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\n\r\n\r\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\r\n\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\n\r\nfunction determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\n\r\n\r\nfunction scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\n\r\n\r\nfunction fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n  return out;\r\n}\r\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\r\n\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  return out;\r\n}\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\n\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\r\n}\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\n\r\n\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\n\r\n\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar sub = subtract;\r\nexports.sub = sub;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.copy = copy;\r\nexports.fromValues = fromValues;\r\nexports.set = set;\r\nexports.identity = identity;\r\nexports.transpose = transpose;\r\nexports.invert = invert;\r\nexports.adjoint = adjoint;\r\nexports.determinant = determinant;\r\nexports.multiply = multiply;\r\nexports.translate = translate;\r\nexports.scale = scale;\r\nexports.rotate = rotate;\r\nexports.rotateX = rotateX;\r\nexports.rotateY = rotateY;\r\nexports.rotateZ = rotateZ;\r\nexports.fromTranslation = fromTranslation;\r\nexports.fromScaling = fromScaling;\r\nexports.fromRotation = fromRotation;\r\nexports.fromXRotation = fromXRotation;\r\nexports.fromYRotation = fromYRotation;\r\nexports.fromZRotation = fromZRotation;\r\nexports.fromRotationTranslation = fromRotationTranslation;\r\nexports.fromQuat2 = fromQuat2;\r\nexports.getTranslation = getTranslation;\r\nexports.getScaling = getScaling;\r\nexports.getRotation = getRotation;\r\nexports.fromRotationTranslationScale = fromRotationTranslationScale;\r\nexports.fromRotationTranslationScaleOrigin = fromRotationTranslationScaleOrigin;\r\nexports.fromQuat = fromQuat;\r\nexports.frustum = frustum;\r\nexports.perspectiveNO = perspectiveNO;\r\nexports.perspectiveZO = perspectiveZO;\r\nexports.perspectiveFromFieldOfView = perspectiveFromFieldOfView;\r\nexports.orthoNO = orthoNO;\r\nexports.orthoZO = orthoZO;\r\nexports.lookAt = lookAt;\r\nexports.targetTo = targetTo;\r\nexports.str = str;\r\nexports.frob = frob;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.multiplyScalar = multiplyScalar;\r\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.sub = exports.mul = exports.ortho = exports.perspective = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\n\r\n\r\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\r\n\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n\r\n  det = 1.0 / det;\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\n\r\n\r\nfunction determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\r\n\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15]; // Cache only the current line of the second matrix\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  b0 = b[4];\r\n  b1 = b[5];\r\n  b2 = b[6];\r\n  b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  b0 = b[8];\r\n  b1 = b[9];\r\n  b2 = b[10];\r\n  b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  b0 = b[12];\r\n  b1 = b[13];\r\n  b2 = b[14];\r\n  b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00, a01, a02, a03;\r\n  var a10, a11, a12, a13;\r\n  var a20, a21, a22, a23;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];\r\n    a01 = a[1];\r\n    a02 = a[2];\r\n    a03 = a[3];\r\n    a10 = a[4];\r\n    a11 = a[5];\r\n    a12 = a[6];\r\n    a13 = a[7];\r\n    a20 = a[8];\r\n    a21 = a[9];\r\n    a22 = a[10];\r\n    a23 = a[11];\r\n    out[0] = a00;\r\n    out[1] = a01;\r\n    out[2] = a02;\r\n    out[3] = a03;\r\n    out[4] = a10;\r\n    out[5] = a11;\r\n    out[6] = a12;\r\n    out[7] = a13;\r\n    out[8] = a20;\r\n    out[9] = a21;\r\n    out[10] = a22;\r\n    out[11] = a23;\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\n\r\n\r\nfunction scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.hypot(x, y, z);\r\n  var s, c, t;\r\n  var a00, a01, a02, a03;\r\n  var a10, a11, a12, a13;\r\n  var a20, a21, a22, a23;\r\n  var b00, b01, b02;\r\n  var b10, b11, b12;\r\n  var b20, b21, b22;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n  a00 = a[0];\r\n  a01 = a[1];\r\n  a02 = a[2];\r\n  a03 = a[3];\r\n  a10 = a[4];\r\n  a11 = a[5];\r\n  a12 = a[6];\r\n  a13 = a[7];\r\n  a20 = a[8];\r\n  a21 = a[9];\r\n  a22 = a[10];\r\n  a23 = a[11]; // Construct the elements of the rotation matrix\r\n\r\n  b00 = x * x * t + c;\r\n  b01 = y * x * t + z * s;\r\n  b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;\r\n  b11 = y * y * t + c;\r\n  b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;\r\n  b21 = y * z * t - x * s;\r\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\r\n\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  } // Perform axis-specific matrix multiplication\r\n\r\n\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  } // Perform axis-specific matrix multiplication\r\n\r\n\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  } // Perform axis-specific matrix multiplication\r\n\r\n\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.hypot(x, y, z);\r\n  var s, c, t;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c; // Perform rotation-specific matrix multiplication\r\n\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\r\n\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\r\n\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\n\r\n\r\nfunction fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\r\n\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\n\r\n\r\nfunction getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n  return out;\r\n}\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\n\r\n\r\nfunction getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n  out[0] = Math.hypot(m11, m12, m13);\r\n  out[1] = Math.hypot(m21, m22, m23);\r\n  out[2] = Math.hypot(m31, m32, m33);\r\n  return out;\r\n}\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\n\r\n\r\nfunction getRotation(out, mat) {\r\n  var scaling = new glMatrix.ARRAY_TYPE(3);\r\n  getScaling(scaling, mat);\r\n  var is1 = 1 / scaling[0];\r\n  var is2 = 1 / scaling[1];\r\n  var is3 = 1 / scaling[2];\r\n  var sm11 = mat[0] * is1;\r\n  var sm12 = mat[1] * is2;\r\n  var sm13 = mat[2] * is3;\r\n  var sm21 = mat[4] * is1;\r\n  var sm22 = mat[5] * is2;\r\n  var sm23 = mat[6] * is3;\r\n  var sm31 = mat[8] * is1;\r\n  var sm32 = mat[9] * is2;\r\n  var sm33 = mat[10] * is3;\r\n  var trace = sm11 + sm22 + sm33;\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (sm23 - sm32) / S;\r\n    out[1] = (sm31 - sm13) / S;\r\n    out[2] = (sm12 - sm21) / S;\r\n  } else if (sm11 > sm22 && sm11 > sm33) {\r\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\r\n    out[3] = (sm23 - sm32) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (sm12 + sm21) / S;\r\n    out[2] = (sm31 + sm13) / S;\r\n  } else if (sm22 > sm33) {\r\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\r\n    out[3] = (sm31 - sm13) / S;\r\n    out[0] = (sm12 + sm21) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (sm23 + sm32) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\r\n    out[3] = (sm12 - sm21) / S;\r\n    out[0] = (sm31 + sm13) / S;\r\n    out[1] = (sm23 + sm32) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n * which matches WebGL/OpenGL's clip volume.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction perspectiveNO(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link mat4.perspectiveNO}\r\n * @function\r\n */\r\n\r\n\r\nvar perspective = perspectiveNO;\r\n/**\r\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\n\r\nexports.perspective = perspective;\r\n\r\nfunction perspectiveZO(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = far * nf;\r\n    out[14] = far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -near;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\r\n * which matches WebGL/OpenGL's clip volume.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction orthoNO(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link mat4.orthoNO}\r\n * @function\r\n */\r\n\r\n\r\nvar ortho = orthoNO;\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds.\r\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\r\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\n\r\nexports.ortho = ortho;\r\n\r\nfunction orthoZO(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = near * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction lookAt(out, eye, center, up) {\r\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n  len = 1 / Math.hypot(z0, z1, z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.hypot(x0, x1, x2);\r\n\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n  len = Math.hypot(y0, y1, y2);\r\n\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\r\n}\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\n\r\n\r\nfunction frob(a) {\r\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\r\n}\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\n\r\n\r\nfunction multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\n\r\n\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar sub = subtract;\r\nexports.sub = sub;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.identity = identity;\r\nexports.setAxisAngle = setAxisAngle;\r\nexports.getAxisAngle = getAxisAngle;\r\nexports.getAngle = getAngle;\r\nexports.multiply = multiply;\r\nexports.rotateX = rotateX;\r\nexports.rotateY = rotateY;\r\nexports.rotateZ = rotateZ;\r\nexports.calculateW = calculateW;\r\nexports.exp = exp;\r\nexports.ln = ln;\r\nexports.pow = pow;\r\nexports.slerp = slerp;\r\nexports.random = random;\r\nexports.invert = invert;\r\nexports.conjugate = conjugate;\r\nexports.fromMat3 = fromMat3;\r\nexports.fromEuler = fromEuler;\r\nexports.str = str;\r\nexports.setAxes = exports.sqlerp = exports.rotationTo = exports.equals = exports.exactEquals = exports.normalize = exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.lerp = exports.dot = exports.scale = exports.mul = exports.add = exports.set = exports.copy = exports.fromValues = exports.clone = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nvar mat3 = _interopRequireWildcard(require(\"./mat3.js\"));\r\n\r\nvar vec3 = _interopRequireWildcard(require(\"./vec3.js\"));\r\n\r\nvar vec4 = _interopRequireWildcard(require(\"./vec4.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\n\r\n\r\nfunction setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\n\r\n\r\nfunction getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n\r\n  return rad;\r\n}\r\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\r\n\r\n\r\nfunction getAngle(a, b) {\r\n  var dotproduct = dot(a, b);\r\n  return Math.acos(2 * dotproduct * dotproduct - 1);\r\n}\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction exp(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  var r = Math.sqrt(x * x + y * y + z * z);\r\n  var et = Math.exp(w);\r\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\r\n  out[0] = x * s;\r\n  out[1] = y * s;\r\n  out[2] = z * s;\r\n  out[3] = et * Math.cos(r);\r\n  return out;\r\n}\r\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction ln(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  var r = Math.sqrt(x * x + y * y + z * z);\r\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\r\n  out[0] = x * t;\r\n  out[1] = y * t;\r\n  out[2] = z * t;\r\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\r\n  return out;\r\n}\r\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction pow(out, a, b) {\r\n  ln(out, a);\r\n  scale(out, out, b);\r\n  exp(out, out);\r\n  return out;\r\n}\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\r\n\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\r\n\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  } // calculate coefficients\r\n\r\n\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  } // calculate final values\r\n\r\n\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n  return out;\r\n}\r\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nfunction conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\n\r\nfunction fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\n\r\nfunction fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\n\r\n\r\nvar clone = vec4.clone;\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\n\r\nexports.clone = clone;\r\nvar fromValues = vec4.fromValues;\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexports.fromValues = fromValues;\r\nvar copy = vec4.copy;\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexports.copy = copy;\r\nvar set = vec4.set;\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexports.set = set;\r\nvar add = vec4.add;\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\n\r\nexports.add = add;\r\nvar mul = multiply;\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar scale = vec4.scale;\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\n\r\nexports.scale = scale;\r\nvar dot = vec4.dot;\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexports.dot = dot;\r\nvar lerp = vec4.lerp;\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\nexports.lerp = lerp;\r\nvar length = vec4.length;\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\n\r\nexports.length = length;\r\nvar len = length;\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\n\r\nexports.len = len;\r\nvar squaredLength = vec4.squaredLength;\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\n\r\nexports.squaredLength = squaredLength;\r\nvar sqrLen = squaredLength;\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\n\r\nexports.sqrLen = sqrLen;\r\nvar normalize = vec4.normalize;\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexports.normalize = normalize;\r\nvar exactEquals = vec4.exactEquals;\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\nexports.exactEquals = exactEquals;\r\nvar equals = vec4.equals;\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\n\r\nexports.equals = equals;\r\n\r\nvar rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nexports.rotationTo = rotationTo;\r\n\r\nvar sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n    return out;\r\n  };\r\n}();\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\n\r\n\r\nexports.sqlerp = sqlerp;\r\n\r\nvar setAxes = function () {\r\n  var matr = mat3.create();\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();\r\n\r\nexports.setAxes = setAxes;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.length = length;\r\nexports.fromValues = fromValues;\r\nexports.copy = copy;\r\nexports.set = set;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.multiply = multiply;\r\nexports.divide = divide;\r\nexports.ceil = ceil;\r\nexports.floor = floor;\r\nexports.min = min;\r\nexports.max = max;\r\nexports.round = round;\r\nexports.scale = scale;\r\nexports.scaleAndAdd = scaleAndAdd;\r\nexports.distance = distance;\r\nexports.squaredDistance = squaredDistance;\r\nexports.squaredLength = squaredLength;\r\nexports.negate = negate;\r\nexports.inverse = inverse;\r\nexports.normalize = normalize;\r\nexports.dot = dot;\r\nexports.cross = cross;\r\nexports.lerp = lerp;\r\nexports.hermite = hermite;\r\nexports.bezier = bezier;\r\nexports.random = random;\r\nexports.transformMat4 = transformMat4;\r\nexports.transformMat3 = transformMat3;\r\nexports.transformQuat = transformQuat;\r\nexports.rotateX = rotateX;\r\nexports.rotateY = rotateY;\r\nexports.rotateZ = rotateZ;\r\nexports.angle = angle;\r\nexports.zero = zero;\r\nexports.str = str;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\n\r\nfunction length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\n\r\n\r\nfunction fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\n\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.hypot(x, y, z);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\n\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\n\r\nfunction squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  out[2] = a[2] * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\n\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n  return out;\r\n}\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2]; // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\r\n\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\r\n\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\r\n\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction rotateX(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\r\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction rotateY(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction rotateZ(out, a, b, rad) {\r\n  var p = [],\r\n      r = []; //Translate point to the origin\r\n\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2]; //perform rotation\r\n\r\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\r\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\r\n  r[2] = p[2]; //translate to correct position\r\n\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n  return out;\r\n}\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\n\r\n\r\nfunction angle(a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\r\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\r\n      mag = mag1 * mag2,\r\n      cosine = mag && dot(a, b) / mag;\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\n\r\n\r\nvar sub = subtract;\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\n\r\nexports.sub = sub;\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar div = divide;\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\n\r\nexports.div = div;\r\nvar dist = distance;\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\n\r\nexports.dist = dist;\r\nvar sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\n\r\nexports.sqrDist = sqrDist;\r\nvar len = length;\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\n\r\nexports.len = len;\r\nvar sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexports.sqrLen = sqrLen;\r\n\r\nvar forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();\r\n\r\nexports.forEach = forEach;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.fromValues = fromValues;\r\nexports.copy = copy;\r\nexports.set = set;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.multiply = multiply;\r\nexports.divide = divide;\r\nexports.ceil = ceil;\r\nexports.floor = floor;\r\nexports.min = min;\r\nexports.max = max;\r\nexports.round = round;\r\nexports.scale = scale;\r\nexports.scaleAndAdd = scaleAndAdd;\r\nexports.distance = distance;\r\nexports.squaredDistance = squaredDistance;\r\nexports.length = length;\r\nexports.squaredLength = squaredLength;\r\nexports.negate = negate;\r\nexports.inverse = inverse;\r\nexports.normalize = normalize;\r\nexports.dot = dot;\r\nexports.cross = cross;\r\nexports.lerp = lerp;\r\nexports.random = random;\r\nexports.transformMat4 = transformMat4;\r\nexports.transformQuat = transformQuat;\r\nexports.zero = zero;\r\nexports.str = str;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\n\r\n\r\nfunction fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\n\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\n\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\n\r\nfunction length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.hypot(x, y, z, w);\r\n}\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\n\r\nfunction squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = x * len;\r\n  out[1] = y * len;\r\n  out[2] = z * len;\r\n  out[3] = w * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\n\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\r\n\r\n\r\nfunction cross(out, u, v, w) {\r\n  var A = v[0] * w[1] - v[1] * w[0],\r\n      B = v[0] * w[2] - v[2] * w[0],\r\n      C = v[0] * w[3] - v[3] * w[0],\r\n      D = v[1] * w[2] - v[2] * w[1],\r\n      E = v[1] * w[3] - v[3] * w[1],\r\n      F = v[2] * w[3] - v[3] * w[2];\r\n  var G = u[0];\r\n  var H = u[1];\r\n  var I = u[2];\r\n  var J = u[3];\r\n  out[0] = H * F - I * E + J * D;\r\n  out[1] = -(G * F) + I * C - J * B;\r\n  out[2] = G * E - H * C + J * A;\r\n  out[3] = -(G * D) + H * B - I * A;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3]; // calculate quat * vec\r\n\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\r\n\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\r\n\r\n\r\nfunction zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\n\r\n\r\nvar sub = subtract;\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\n\r\nexports.sub = sub;\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar div = divide;\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\n\r\nexports.div = div;\r\nvar dist = distance;\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\n\r\nexports.dist = dist;\r\nvar sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\n\r\nexports.sqrDist = sqrDist;\r\nvar len = length;\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\n\r\nexports.len = len;\r\nvar sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexports.sqrLen = sqrLen;\r\n\r\nvar forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      vec[2] = a[i + 2];\r\n      vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n      a[i + 2] = vec[2];\r\n      a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();\r\n\r\nexports.forEach = forEach;","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.fromValues = fromValues;\r\nexports.fromRotationTranslationValues = fromRotationTranslationValues;\r\nexports.fromRotationTranslation = fromRotationTranslation;\r\nexports.fromTranslation = fromTranslation;\r\nexports.fromRotation = fromRotation;\r\nexports.fromMat4 = fromMat4;\r\nexports.copy = copy;\r\nexports.identity = identity;\r\nexports.set = set;\r\nexports.getDual = getDual;\r\nexports.setDual = setDual;\r\nexports.getTranslation = getTranslation;\r\nexports.translate = translate;\r\nexports.rotateX = rotateX;\r\nexports.rotateY = rotateY;\r\nexports.rotateZ = rotateZ;\r\nexports.rotateByQuatAppend = rotateByQuatAppend;\r\nexports.rotateByQuatPrepend = rotateByQuatPrepend;\r\nexports.rotateAroundAxis = rotateAroundAxis;\r\nexports.add = add;\r\nexports.multiply = multiply;\r\nexports.scale = scale;\r\nexports.lerp = lerp;\r\nexports.invert = invert;\r\nexports.conjugate = conjugate;\r\nexports.normalize = normalize;\r\nexports.str = str;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.dot = exports.mul = exports.setReal = exports.getReal = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nvar quat = _interopRequireWildcard(require(\"./quat.js\"));\r\n\r\nvar mat4 = _interopRequireWildcard(require(\"./mat4.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\nfunction create() {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\n\r\n\r\nfunction fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\n\r\n\r\nfunction fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  var ax = x2 * 0.5,\r\n      ay = y2 * 0.5,\r\n      az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\n\r\n\r\nfunction fromRotationTranslation(out, q, t) {\r\n  var ax = t[0] * 0.5,\r\n      ay = t[1] * 0.5,\r\n      az = t[2] * 0.5,\r\n      bx = q[0],\r\n      by = q[1],\r\n      bz = q[2],\r\n      bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\n\r\n\r\nfunction fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\n\r\n\r\nfunction fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\n\r\n\r\nfunction fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  var outer = quat.create();\r\n  mat4.getRotation(outer, a);\r\n  var t = new glMatrix.ARRAY_TYPE(3);\r\n  mat4.getTranslation(t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\n\r\nfunction set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\n\r\n\r\nvar getReal = quat.copy;\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\n\r\nexports.getReal = getReal;\r\n\r\nfunction getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\n\r\nvar setReal = quat.copy;\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexports.setReal = setReal;\r\n\r\nfunction setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\n\r\n\r\nfunction getTranslation(out, a) {\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction translate(out, a, v) {\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3],\r\n      bx1 = v[0] * 0.5,\r\n      by1 = v[1] * 0.5,\r\n      bz1 = v[2] * 0.5,\r\n      ax2 = a[4],\r\n      ay2 = a[5],\r\n      az2 = a[6],\r\n      aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction rotateX(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateX(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction rotateY(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateY(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction rotateZ(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateZ(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction rotateByQuatAppend(out, a, q) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction rotateByQuatPrepend(out, q, a) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      bx = a[0],\r\n      by = a[1],\r\n      bz = a[2],\r\n      bw = a[3];\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < glMatrix.EPSILON) {\r\n    return copy(out, a);\r\n  }\r\n\r\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  var bx = s * axis[0] / axisLength;\r\n  var by = s * axis[1] / axisLength;\r\n  var bz = s * axis[2] / axisLength;\r\n  var bw = Math.cos(rad);\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  var ax0 = a[0],\r\n      ay0 = a[1],\r\n      az0 = a[2],\r\n      aw0 = a[3],\r\n      bx1 = b[4],\r\n      by1 = b[5],\r\n      bz1 = b[6],\r\n      bw1 = b[7],\r\n      ax1 = a[4],\r\n      ay1 = a[5],\r\n      az1 = a[6],\r\n      aw1 = a[7],\r\n      bx0 = b[0],\r\n      by0 = b[1],\r\n      bz0 = b[2],\r\n      bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\r\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\r\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\r\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\r\n  return out;\r\n}\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\n\r\n\r\nvar mul = multiply;\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\n\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\n\r\n\r\nvar dot = quat.dot;\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\n\r\nexports.dot = dot;\r\n\r\nfunction lerp(out, a, b, t) {\r\n  var mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction invert(out, a) {\r\n  var sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\n\r\n\r\nfunction conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\n\r\n\r\nvar length = quat.length;\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\n\r\nexports.length = length;\r\nvar len = length;\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\n\r\nexports.len = len;\r\nvar squaredLength = quat.squaredLength;\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\n\r\nexports.squaredLength = squaredLength;\r\nvar sqrLen = squaredLength;\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\n\r\nexports.sqrLen = sqrLen;\r\n\r\nfunction normalize(out, a) {\r\n  var magnitude = squaredLength(a);\r\n\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n    var a0 = a[0] / magnitude;\r\n    var a1 = a[1] / magnitude;\r\n    var a2 = a[2] / magnitude;\r\n    var a3 = a[3] / magnitude;\r\n    var b0 = a[4];\r\n    var b1 = a[5];\r\n    var b2 = a[6];\r\n    var b3 = a[7];\r\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\r\n}\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\r\n}","\r\n\r\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.create = create;\r\nexports.clone = clone;\r\nexports.fromValues = fromValues;\r\nexports.copy = copy;\r\nexports.set = set;\r\nexports.add = add;\r\nexports.subtract = subtract;\r\nexports.multiply = multiply;\r\nexports.divide = divide;\r\nexports.ceil = ceil;\r\nexports.floor = floor;\r\nexports.min = min;\r\nexports.max = max;\r\nexports.round = round;\r\nexports.scale = scale;\r\nexports.scaleAndAdd = scaleAndAdd;\r\nexports.distance = distance;\r\nexports.squaredDistance = squaredDistance;\r\nexports.length = length;\r\nexports.squaredLength = squaredLength;\r\nexports.negate = negate;\r\nexports.inverse = inverse;\r\nexports.normalize = normalize;\r\nexports.dot = dot;\r\nexports.cross = cross;\r\nexports.lerp = lerp;\r\nexports.random = random;\r\nexports.transformMat2 = transformMat2;\r\nexports.transformMat2d = transformMat2d;\r\nexports.transformMat3 = transformMat3;\r\nexports.transformMat4 = transformMat4;\r\nexports.rotate = rotate;\r\nexports.angle = angle;\r\nexports.zero = zero;\r\nexports.str = str;\r\nexports.exactEquals = exactEquals;\r\nexports.equals = equals;\r\nexports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = void 0;\r\n\r\nvar glMatrix = _interopRequireWildcard(require(\"./common.js\"));\r\n\r\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\r\n\r\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nfunction create() {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\n\r\nfunction clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\n\r\n\r\nfunction fromValues(x, y) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\n\r\n\r\nfunction distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.hypot(x, y);\r\n}\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\n\r\n\r\nfunction squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\n\r\n\r\nfunction length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.hypot(x, y);\r\n}\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\n\r\n\r\nfunction squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n  }\r\n\r\n  out[0] = a[0] * len;\r\n  out[1] = a[1] * len;\r\n  return out;\r\n}\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\n\r\n\r\nfunction dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\n\r\n\r\nfunction cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction rotate(out, a, b, rad) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(rad),\r\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\r\n\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n  return out;\r\n}\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\n\r\n\r\nfunction angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1],\r\n      // mag is the product of the magnitudes of a and b\r\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\r\n      // mag &&.. short circuits if mag == 0\r\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\r\n\r\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\r\n}\r\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\r\n\r\n\r\nfunction zero(out) {\r\n  out[0] = 0.0;\r\n  out[1] = 0.0;\r\n  return out;\r\n}\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\n\r\n\r\nfunction str(a) {\r\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\r\n}\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\n\r\n\r\nfunction equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\n\r\n\r\nvar len = length;\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\n\r\nexports.len = len;\r\nvar sub = subtract;\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\n\r\nexports.sub = sub;\r\nvar mul = multiply;\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\n\r\nexports.mul = mul;\r\nvar div = divide;\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\n\r\nexports.div = div;\r\nvar dist = distance;\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\n\r\nexports.dist = dist;\r\nvar sqrDist = squaredDistance;\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\n\r\nexports.sqrDist = sqrDist;\r\nvar sqrLen = squaredLength;\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\n\r\nexports.sqrLen = sqrLen;\r\n\r\nvar forEach = function () {\r\n  var vec = create();\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i, l;\r\n\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];\r\n      vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];\r\n      a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();\r\n\r\nexports.forEach = forEach;"]}